app: think-in
service: think-in-api
# app and org for use with dashboard.serverless.com
org: crisanmm

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  region: eu-central-1
  memorySize: 128
  timeout: 5
  environment:
    DYNAMODB_TABLE_NAME: think-in-database

functions:
  post-avatar:
    handler: avatars/post-avatar.postAvatar
    events:
      - http:
          path: /avatars
          method: post
          cors: true
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 's3:*'
        Resource:
          - 'arn:aws:s3:::think-in-content/*'
      - Effect: 'Allow'
        Action:
          - cognito-identity:Describe*
          - cognito-identity:Get*
          - cognito-identity:List*
          - cognito-idp:Describe*
          - cognito-idp:AdminGet*
          - cognito-idp:AdminList*
          - cognito-idp:AdminUpdate*
          - cognito-idp:List*
          - cognito-idp:Get*
          - cognito-sync:Describe*
          - cognito-sync:Get*
          - cognito-sync:List*
          - iam:ListOpenIdConnectProviders
          - iam:ListRoles
          - sns:ListPlatformApplications
        Resource:
          - '*'

  get-chats:
    handler: chats/get-chats.getChats
    events:
      - http:
          path: /chats/{chatId}
          method: get
          cors: true
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_NAME}

  get-chats-id:
    handler: chats/get-chats-id.getChatsId
    events:
      - http:
          path: /chats/{chatId}/{messageId}
          method: get
          cors: true
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_NAME}

  post-chats:
    handler: chats/post-chats.postChats
    events:
      - http:
          path: /chats/{chatId}
          method: post
          cors: true
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_NAME}

  put-chats:
    handler: chats/put-chats.putChats
    events:
      - http:
          path: /chats/{chatId}/{messageId}
          method: put
          cors: true
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_NAME}

  delete-chats:
    handler: chats/delete-chats-id.deleteChatsId
    events:
      - http:
          path: /chats/{chatId}/{messageId}
          method: delete
          cors: true
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_NAME}

  get-user:
    handler: users/get-user.getUser
    events:
      - http:
          path: /users/{userId}
          method: get
          cors: true
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - cognito-identity:Describe*
          - cognito-identity:Get*
          - cognito-identity:List*
          - cognito-idp:Describe*
          - cognito-idp:AdminGet*
          - cognito-idp:AdminList*
          - cognito-idp:AdminUpdate*
          - cognito-idp:List*
          - cognito-idp:Get*
          - cognito-sync:Describe*
          - cognito-sync:Get*
          - cognito-sync:List*
          - iam:ListOpenIdConnectProviders
          - iam:ListRoles
          - sns:ListPlatformApplications
        Resource:
          - '*'

  put-user:
    handler: users/put-user.putUser
    events:
      - http:
          path: /users/{userId}
          method: put
          cors: true
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - cognito-identity:Describe*
          - cognito-identity:Get*
          - cognito-identity:List*
          - cognito-idp:Describe*
          - cognito-idp:AdminGet*
          - cognito-idp:AdminList*
          - cognito-idp:AdminUpdate*
          - cognito-idp:List*
          - cognito-idp:Get*
          - cognito-sync:Describe*
          - cognito-sync:Get*
          - cognito-sync:List*
          - iam:ListOpenIdConnectProviders
          - iam:ListRoles
          - sns:ListPlatformApplications
        Resource:
          - '*'

  get-notifications:
    handler: notifications/get-notifications.getNotifications
    events:
      - http:
          path: /notifications/{userId}
          method: get
          cors: true
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_NAME}

  post-notifications:
    handler: notifications/post-notifications.postNotifications
    events:
      - http:
          path: /notifications/{userId}
          method: post
          cors: true
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_NAME}

  delete-notifications:
    handler: notifications/delete-notifications.deleteNotifications
    events:
      - http:
          path: /notifications/{userId}
          method: delete
          cors: true
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:Query
          - dynamodb:BatchWriteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_NAME}

  post-translate:
    handler: translation/post-translate.postTranslate
    events:
      - http:
          path: /translation/translate
          method: post
          cors: true

  get-languages:
    handler: translation/get-languages.getLanguages
    events:
      - http:
          path: /translation/languages
          method: get
          cors: true

package:
  include:
    - translation/GOOGLE_APPLICATION_CREDENTIALS.json

resources:
  Resources:
    thinkInChatsTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_NAME}
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

plugins:
  - serverless-plugin-typescript
  - serverless-iam-roles-per-function
